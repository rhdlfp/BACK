spring:
    mail:
      host: smtp.gmail.com
      port: 587
      username: leekwanho04@gmail.com
      password: khjt xjku ewww ydja
      properties: 
        mail:
          smtp:
            auth: true
            starttls:
              enable: true
              
    datasource:
        url: jdbc:mysql://localhost:3306/spring_social?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
        username: root
        password: qwer1234

    jpa:
        show-sql: true
        hibernate:
            ddl-auto: update #validate update create
            naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
        properties:
            hibernate:
                dialect: org.hibernate.dialect.MySQL5InnoDBDialect
                jdbc:
                  time_zone: Asia/Seoul
    security:
      oauth2:
        client:
          registration:
            google:
              clientId: 2474667053-1oa1okn4di5mcn115d71kjeeqvtpt0gm.apps.googleusercontent.com
              clientSecret: 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
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - email
                - profile
                
            naver:
              client-id: 00RuT1awGkBFQhUWYIuY
              client-secret: tX_OlYTcPT
              scope:
                - name
                - email
                - profile_image
              client-name: Naver # 클라이언트 네임은 구글 페이스북도 대문자로 시작하더라.
              authorization-grant-type: authorization_code
              redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
                  
#            facebook:
#              clientId: 121189305185277
#              clientSecret: 42ffe5aa7379e8326387e0fe16f34132
#              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
#              scope:
#                - email
#                - public_profile
            github:
              clientId: 09b1bea415d9113929bc
              clientSecret: e76c0c25588d2af6d464c756f187e10fd3fef9bf
              redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
              scope:
                - user:email
                - read:user
            kakao:
              client-id: 218542ebd9b567d8580b8d6b0fc07765
              client-secret: QqxPlvZUgWNwNhwA0bgcGtoPm7unyVUz
              client-authentication-method: POST
              redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
              authorization-grant-type: authorization_code
              scope:
                - profile_nickname
                - account_email
                
          provider:
#            facebook:
#              authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
#              tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
#              userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
              
            naver:
              authorization-uri: https://nid.naver.com/oauth2.0/authorize
              token-uri: https://nid.naver.com/oauth2.0/token
              user-info-uri: https://openapi.naver.com/v1/nid/me
              user-name-attribute: response # 회원정보를 json의 response 키값으로 리턴해줌.
              
            kakao:
              authorization-uri: https://kauth.kakao.com/oauth/authorize
              tokenUri: https://kauth.kakao.com/oauth/token
              userInfoUri: https://kapi.kakao.com/v2/user/me
              userNameAttribute: id
    servlet:
      multipart:
        max-file-size: 10MB
        max-request-size: 20MB
   
app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 86400000
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:8080
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect
    # IMAGE_UPLOAD_DIRECTORY를 추가
    image-upload-directory: /Temp/img